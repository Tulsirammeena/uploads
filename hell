public class OrderModel {
	private Integer orderId;
    public String OrderType; // Equivalent to OrderType
    private String companyName; // Requires a lookup or join to get the company name
    private LocalDateTime date;
    private BigDecimal price;
    private Integer quantity;
    private BigDecimal totalPrice;
    public String status; // Equivalent to OrderStatus
    private String userName;
    
    
    public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public void setOrderId(Integer orderId) {
		this.orderId = orderId;
	}

	public void setOrderType(String orderType) {
		OrderType = orderType;
	}

	public void setPrice(BigDecimal price) {
		this.price = price;
	}

	public Integer getOrderId() {
        return orderId;
    }

    public void setTransactionId(Integer orderId) {
        this.orderId = orderId;
    }

    public String getOrderType() {
        return OrderType;
    }

    public void setTransactionType(String OrderType) {
        this.OrderType = OrderType;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public LocalDateTime getDate() {
        return date;
    }

    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public void setSharePrice(BigDecimal price) {
        this.price = price;
    }

    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public BigDecimal getTotalPrice() {
        return totalPrice;
    }

    public void setTotalPrice(BigDecimal totalPrice) {
        this.totalPrice = totalPrice;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}


document.addEventListener('DOMContentLoaded', () => {
    // Function to fetch stock data from the API
    async function fetchStockData() {
        try {
            const response = await fetch('http://localhost:8081/stocks/list');
            const data = await response.json();

            if (data.statusCode === 200) {
                populateStocksTable(data.data);
            } else {
                console.error('Error fetching data:', data.message);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // Function to populate the stocks table with fetched data
    function populateStocksTable(stocks) {
        const tableBody = document.querySelector('#stocksTableBody');
        tableBody.innerHTML = ''; // Clear existing data

        stocks.forEach(stock => {
            const row = document.createElement('tr');

            // Add data-symbol and data-company-name to the row for easy access
            row.setAttribute('data-symbol', stock.symbol);
            row.setAttribute('data-company-name', stock.name);

            row.innerHTML = `
                <td>${stock.symbol}</td>
                <td>${stock.name}</td>
                <td>$${stock.price.toFixed(2)}</td>
                <td>${stock.volume.toLocaleString()}</td>
                <td>${stock.percentageChange.toLocaleString()}</td>
                <td>
                    <button class="buy-btn" onclick="handleAction('buy', '${stock.symbol}')">Buy</button>
                    <button class="sell-btn" onclick="handleAction('sell', '${stock.symbol}')">Sell</button>
                </td>
            `;

            tableBody.appendChild(row);
        });
    }

    // Function to handle Buy/Sell actions
    window.handleAction = async function(action, symbol) {
        // Prompt user for quantity
        const quantity = prompt("Enter the quantity:");
        if (!quantity || isNaN(quantity) || quantity <= 0) {
            alert("Please enter a valid quantity.");
            return;
        }

        // Get the current user's username (from localStorage)
        const userName = getCurrentUserName();
        if (!userName) {
            alert("User is not authenticated. Please log in.");
            return;
        }

        // Get the company name from the row's data attribute
        const companyName = document.querySelector(`tr[data-symbol="${symbol}"]`).getAttribute('data-company-name');

        if (!companyName) {
            alert("Company name is not defined.");
            return;
        }

        // Prepare the order data
        const orderData = {
            "companyName": companyName,
            "action": action.toUpperCase(),  // BUY or SELL
            "quantity": parseInt(quantity),
            "userName": userName  // Pass the username in the request
        };

        console.log("Order data being sent ", JSON.stringify(orderData, null, 2));

        try {
            const response = await fetch('http://localhost:8081/api/orders/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            });

            if (response.ok) {
                alert("Order placed successfully!");
            } else {
                const errorMsg = await response.text();  // Read error message
                alert(`Failed to place order. Server response: ${errorMsg}`);
            }
        } catch (error) {
            console.error('Error placing order:', error);
        }
    };

    // Handle logout
    document.getElementById('logoutButton').addEventListener('click', () => {
        alert('Logging out...');
        // Implement logout logic here
        window.location.href = 'login.html';
    });

    // Fetch and display stock data when the page loads
    fetchStockData();
});

// Function to get the current user's username
function getCurrentUserName() {
    const userName = localStorage.getItem('userName');
    console.log("Fetched userName: ", userName);
    return userName;  // This assumes you store the username in localStorage
}

@RestController
@RequestMapping("/api/orders")
public class OrderController {

    @Autowired
    private OrderService orderService;

    @GetMapping("/history")
    public List<OrderModel> getOrderHistory(
            @RequestParam(value = "userId", required = false) String userId,
            @RequestParam(value = "begin_date", required = false) String beginDateStr,
            @RequestParam(value = "end_date", required = false) String endDateStr) {

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDateTime beginDate = beginDateStr != null ? LocalDate.parse(beginDateStr, formatter).atStartOfDay() : null;
        LocalDateTime endDate = endDateStr != null ? LocalDate.parse(endDateStr, formatter).atTime(23, 59, 59) : null;

        return orderService.getOrderHistory(userId, beginDate, endDate);
    }
    @CrossOrigin(origins = "http://127.0.0.1:3000")
    @PostMapping("/create")
    public ResponseEntity<String> createOrder(@RequestBody OrderModel orderModel) {
        try {
            // Call the service to process the order
        	System.out.println("Recieved orderModel: " + orderModel);
        	
        	System.out.println("Recieved userName: " + orderModel.getCompanyName());
            orderService.createOrder(orderModel,orderModel.getUserName());
            return ResponseEntity.ok("Order placed successfully!");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body("Error creating order: " + e.getMessage());
        }
    }
}


