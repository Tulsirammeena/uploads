// Handle File Upload Form Submission
document.querySelector('.file-upload form').addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent the default form submission

    const fileInput = document.getElementById('file');
    if (!fileInput.files.length) {
        alert('Please select a file to upload.');
        return; // Exit the function if no file is selected
    }

    const file = fileInput.files[0];

    try {
        // Create a FormData object and append the file
        const formData = new FormData();
        formData.append('file', file);

        // Send the file to the server
        const response = await fetch('http://localhost:8081/admin/upload', {
            method: 'POST',
            body: formData // Use FormData as the body of the request
        });

        const result = await response.text(); // Read the response from the server
        if (response.ok) {
            // File uploaded successfully
            alert('File uploaded successfully: ' + result);
        } else {
            // File upload failed
            alert('File upload failed: ' + result);
        }
    } catch (error) {
        // Handle any errors during the fetch operation
        console.error('Error uploading file:', error);
        alert('Error uploading file');
    }
});

// Handle Compute Orders Button
document.getElementById("processOrdersBtn").addEventListener("click", async () => {
    try {
        const response = await fetch('http://localhost:8081/admin/process-orders', {
            method: 'POST',
        });

        if (response.ok) {
            alert("Pending orders processed successfully!");
        } else {
            const errorMsg = await response.text();  // Read error message from server
            alert("Failed to process orders: " + errorMsg);
        }
    } catch (error) {
        console.error("Error processing orders:", error);
        alert("Error processing orders.");
    }
});


@RestController
@RequestMapping("/admin")
public class AdminController {

    @Autowired
    private OrderProcessingService orderProcessingService;

    @PostMapping("/process-orders")
    public ResponseEntity<String> processOrdersManually() {
        try {
            // Call service to process pending orders
            orderProcessingService.processPendingOrders();
            return ResponseEntity.ok("Pending orders processed successfully!");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error processing orders: " + e.getMessage());
        }
    }
}
