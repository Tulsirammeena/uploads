<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="admin_style.css">
</head>
<body>
    <header>
        <div class="header">
            <img src="logo.png" alt="LOGO">
            <h1>Admin Dashboard</h1>
        </div>
        <div class="nav">
            <!-- <a href="investor_home.html">Home</a> -->
            <a href="order_history.html">Order History</a>
            <a href="admin.html">Admin</a>
            <!-- <a href="#support">Support</a> -->
            <input type="text" id="search" placeholder="search">
            <a href="login1.html"><button logout-btn">Log Out</button></a>
        </div>
    </header>
    <div class="container">
        <div class="file-upload">
            <h2>Upload Company Data</h2>
            <form id ="form-container" enctype="multipart/form-data">
                <input type="file" id="file" name="file" accept=".csv" required>
                <button type="submit">Upload</button>
            </form>
        </div>
        <div class="performance-table">
            <h2>Company Performance</h2>
            <table>
                <thead>
                    <tr>
                        <th>Company Name</th>
                        <th>Profit</th>
                        <th>Volume</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Example Row -->
                    
                    <!-- More rows as needed -->
                </tbody>
            </table>
        </div>
        <!-- <div class="error-handling">
            <h2>Error Handling</h2>
            <button id="error-btn">Handle Errors</button>
        </div> -->
    </div>
    <script src="admin_style.js"></script>
</body>
</html>


// Handle File Upload Form Submission
document.querySelector('.file-upload form').addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent the default form submission

    const fileInput = document.getElementById('file');
    if (!fileInput.files.length) {
        alert('Please select a file to upload.');
        return; // Exit the function if no file is selected
    }

    const file = fileInput.files[0];

    try {
        // Create a FormData object and append the file
        const formData = new FormData();
        formData.append('file', file);

        // Send the file to the server
        const response = await fetch('http://localhost:8081/upload', {
            method: 'POST',
            body: formData // Use FormData as the body of the request
        });

        const result = await response.text(); // Read the response from the server
        if (response.ok) {
            // File uploaded successfully
            alert('File uploaded successfully: ' + result);
        } else {
            // File upload failed
            alert('File upload failed: ' + result);
        }
    } catch (error) {
        // Handle any errors during the fetch operation
        console.error('Error uploading file:', error);
        alert('Error uploading file');
    }
});



@RestController
@RequestMapping("/admin")
public class AdminController {

	@Autowired
    private AdminService adminCompanyService;

    @PostMapping("/upload")
    public String handleFileUpload(@RequestParam("file") MultipartFile file) throws java.io.IOException {
        if (file.isEmpty()) {
            return "No file uploaded";
        }

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
            String line;
//            reader.readLine(); // Skip header row
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length == 6) {
                    //Long companyId = Long.parseLong(data[0]);
                    String companyName = data[0];
                    String symbol = data[1];
                    String description = data[2];
                    Long volume = Long.parseLong(data[3]);
                    String date = data[4];
                    BigDecimal stockPrice = new BigDecimal(data[5]);
                    adminCompanyService.saveStockData(companyName, symbol, description, volume, date, stockPrice);
                }
            }
            return "File uploaded and data saved successfully";
        } catch (IOException e) {
            return "Error processing file: " + e.getMessage();
        }
    }

	
    @Autowired
    private OrderProcessingService orderProcessingService;

    @PostMapping("/process-orders")
    public ResponseEntity<String> processOrdersManually() {
        try {
            orderProcessingService.processPendingOrders();
            return ResponseEntity.ok("Pending orders processed successfully!");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error processing orders: " + e.getMessage());
        }
    }
}



@Service
public class AdminService {
    
    @Autowired
    private StockRepo companyRepository;
    
    @Autowired
    private StockHistoryRepo stockRepository;

    public StockEntity findOrCreateCompany(String name, String symbol, String description) {
        StockEntity company = companyRepository.findBySymbol(symbol);
        if (company == null) {
            company = new StockEntity();
            company.setName(name);
            company.setDescription(description);
            company.setSymbol(symbol);
            companyRepository.save(company);
        }
        return company;
    }

    public void saveStockData(String companyName, String symbol, String description, Long volume, String date, BigDecimal stockPrice) {
        // Find or create the company
        StockEntity company = findOrCreateCompany(companyName, symbol, description);
        
        // Create and populate the StockEntity
        StockHistoryEntity stockEntity = new StockHistoryEntity();
        
        stockEntity.setStock(company);
        //stockEntity.setSymbol(symbol);
        stockEntity.setVolume(volume);
        stockEntity.setDate(LocalDate.parse(date, DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        stockEntity.setPrice(stockPrice);
        
        // Save the StockEntity
        stockRepository.save(stockEntity);
    }

	
}
